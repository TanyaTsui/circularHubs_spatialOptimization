res$points
# ---------- import costEffectiveness.py ---------------
source_python('costEffectiveness.py')
# ---------- import costEffectiveness.py ---------------
source_python('costEffectiveness.py')
# ---------- import costEffectiveness.py ---------------
source_python('costEffectiveness.py')
testFunction <- function(points) {
testValue <- calcTotCostEffectiveness(points)
return(testValue)
}
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 800
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
res
plot(res)
# ---------- import costEffectiveness.py ---------------
source_python('costEffectiveness.py')
testFunction <- function(points) {
testValue <- calcTotCostEffectiveness(points)
return(testValue)
}
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 800
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
plot(res)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
plot(res)
# ---------- import costEffectiveness.py ---------------
source_python('costEffectiveness.py')
testFunction <- function(points) {
testValue <- calcTotCostEffectiveness(points)
return(testValue)
}
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 800
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y'))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDemand), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDemand), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
View(infoGrid)
View(infoGrid_plot)
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDemand), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 5
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 50
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints, color='black', size=5, pch=15)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints, color='black', size=5, pch=15)
View(startingPoints)
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=5, pch=15)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=12)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=7, pch=12)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=6, pch=12)
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 5
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(rees)
plot(res)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 50
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(res)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 100
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(res)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 500
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(res)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 1000
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(res)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 5000
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plor(res)
plot(res)
# -------- define starting guesses --------
nHubs <- 50
candiIndex <- unlist(firstGuesses[nHubs, "candiIndexes"])
startingPoints <- candi[candiIndex, ]
startingPoints$id <- as.numeric(rownames(startingPoints))
startingPoints <- relocate(startingPoints, id)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 500
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
View(firstGuesses)
# -------- define starting guesses --------
nHubs <- 45
candiIndex <- unlist(firstGuesses[nHubs, "candiIndexes"])
startingPoints <- candi[candiIndex, ]
startingPoints$id <- as.numeric(rownames(startingPoints))
startingPoints <- relocate(startingPoints, id)
# ----- annealing schedule ------
schedule <- scheduleSPSANN(
initial.temperature = 500
)
# ----- Execute the simulated annealing algorithm -----
# make starting gdf of points (instead of letting optimUSER randomly select)
res <- optimUSER(
points = startingPoints, fun = testFunction,
schedule = schedule, candi = candi,
plotit = TRUE
)
resPoints <- st_as_sf(res$points, coords = c('x', 'y'))
# ------ plot results -----
# re-read data to avoid R from crashing
# candidate sites
candiInfo <- st_read('data/candiInfo_ams.shp')
candi <- candiInfo %>%
st_coordinates() %>%
as.data.frame() %>%
rename('x' = 'X', 'y' = 'Y')
infoGrid <- st_read('data/infoGrid_ams.shp')
# I don't think I need this code below - check later
infoGrid_plot <- infoGrid %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
candiInfo_plot <- candiInfo %>%
st_set_crs(st_crs(resPoints))
startingPoints_plot <- startingPoints %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(st_crs(resPoints))
# plot
ggplot() +
geom_sf(data = infoGrid_plot, aes(size=totKgDeman), color='darkgrey') +
geom_sf(data = candiInfo_plot, color='red', size=1, pch=15) +
geom_sf(data = resPoints, color='red', size=5, pch=15) +
geom_sf(data = startingPoints_plot, color='black', size=10, pch=7)
plot(res)
resPoints
class(resPoints)
st_write(resPoints, 'results/resPoints_45.shp')
